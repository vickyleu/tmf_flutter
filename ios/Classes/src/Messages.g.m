// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface PGNMessageData ()
+ (PGNMessageData *)fromList:(NSArray *)list;
+ (nullable PGNMessageData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation PGNMessageData
+ (instancetype)makeWithCode:(PGNCode)code
    data:(NSDictionary<NSString *, NSString *> *)data {
  PGNMessageData* pigeonResult = [[PGNMessageData alloc] init];
  pigeonResult.code = code;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (PGNMessageData *)fromList:(NSArray *)list {
  PGNMessageData *pigeonResult = [[PGNMessageData alloc] init];
  pigeonResult.code = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.data != nil, @"");
  return pigeonResult;
}
+ (nullable PGNMessageData *)nullableFromList:(NSArray *)list {
  return (list) ? [PGNMessageData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.code),
    (self.data ?: [NSNull null]),
  ];
}
@end

@interface PGNTmfHostApiCodecReader : FlutterStandardReader
@end
@implementation PGNTmfHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [PGNMessageData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PGNTmfHostApiCodecWriter : FlutterStandardWriter
@end
@implementation PGNTmfHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[PGNMessageData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PGNTmfHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PGNTmfHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PGNTmfHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PGNTmfHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PGNTmfHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PGNTmfHostApiCodecReaderWriter *readerWriter = [[PGNTmfHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void PGNTmfHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PGNTmfHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.TmfHostApi.initTmf"
        binaryMessenger:binaryMessenger
        codec:PGNTmfHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initTmfWithCompletion:)], @"PGNTmfHostApi api (%@) doesn't respond to @selector(initTmfWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api initTmfWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.TmfHostApi.loginTmf"
        binaryMessenger:binaryMessenger
        codec:PGNTmfHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loginTmfAccount:password:isOpenLogin:completion:)], @"PGNTmfHostApi api (%@) doesn't respond to @selector(loginTmfAccount:password:isOpenLogin:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_account = GetNullableObjectAtIndex(args, 0);
        NSString *arg_password = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_isOpenLogin = GetNullableObjectAtIndex(args, 2);
        [api loginTmfAccount:arg_account password:arg_password isOpenLogin:arg_isOpenLogin completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.TmfHostApi.destroy"
        binaryMessenger:binaryMessenger
        codec:PGNTmfHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(destroyWithCompletion:)], @"PGNTmfHostApi api (%@) doesn't respond to @selector(destroyWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api destroyWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.TmfHostApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:PGNTmfHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageMessage:completion:)], @"PGNTmfHostApi api (%@) doesn't respond to @selector(sendMessageMessage:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PGNMessageData *arg_message = GetNullableObjectAtIndex(args, 0);
        [api sendMessageMessage:arg_message completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
