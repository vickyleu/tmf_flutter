// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.uoocuniversity.tmf_flutter.src

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Code(val raw: Int) {
  TMFLINK(0),
  TMFID(1);

  companion object {
    fun ofRaw(raw: Int): Code? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TMAVersion(val raw: Int) {
  DEVELOP(0),
  PREVIEW(1),
  AUDIT(2),
  ONLINE(3),
  LOCAL(4);

  companion object {
    fun ofRaw(raw: Int): TMAVersion? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MessageData (
  val code: Code,
  val data: Map<String?, String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MessageData {
      val code = Code.ofRaw(list[0] as Int)!!
      val data = list[1] as Map<String?, String?>
      return MessageData(code, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code.raw,
      data,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object TmfHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MessageData.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MessageData -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TmfHostApi {
  fun initTmf(callback: (Result<Unit>) -> Unit)
  fun loginTmf(account: String, password: String, isOpenLogin: Boolean, callback: (Result<Boolean>) -> Unit)
  fun destroy(callback: (Result<Unit>) -> Unit)
  fun sendMessage(message: MessageData, callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by TmfHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      TmfHostApiCodec
    }
    /** Sets up an instance of `TmfHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: TmfHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TmfHostApi.initTmf", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.initTmf() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TmfHostApi.loginTmf", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val accountArg = args[0] as String
            val passwordArg = args[1] as String
            val isOpenLoginArg = args[2] as Boolean
            api.loginTmf(accountArg, passwordArg, isOpenLoginArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TmfHostApi.destroy", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.destroy() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.TmfHostApi.sendMessage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val messageArg = args[0] as MessageData
            api.sendMessage(messageArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
